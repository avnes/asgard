---
- name: Upgrade all packages
  dnf:
    name: "*"
    state: latest
  when: upgrade_software | bool
  tags:
    - skip_ansible_lint

- name: Install additional software
  dnf:
    name: "{{ item }}"
    state: present
  with_items: "{{ install_software }}"

- name: Start cockpit
  systemd:
    name: cockpit
    state: started
  tags:
    - molecule-notest

- name: Enable cockpit.socket
  systemd:
    name: cockpit.socket
    enabled: yes
  tags:
    - molecule-notest

- name: Firewall rules for cockpit
  firewalld:
    zone: public
    service: cockpit
    permanent: true
    state: enabled
    immediate: yes
  tags:
    - molecule-notest

- name: Reload firewalld service
  ansible.builtin.systemd:
    name: firewalld.service
    state: reloaded
  tags:
    - molecule-notest

- name: Enable and start libvirt
  systemd:
    name: libvirtd
    state: started
    enabled: yes
  tags:
    - molecule-notest

- name: Configure dnf-automatic
  ansible.builtin.lineinfile:
    path: "/etc/dnf/automatic.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - regexp: "^apply_updates.*"
      line: "apply_updates = yes"
    - regexp: "^upgrade_type.*"
      line: "upgrade_type = security"

- name: Enable and start dnf-automatic.timer
  systemd:
    name: dnf-automatic.timer
    state: started
    enabled: yes
  tags:
    - molecule-notest

- name: Configure external repo
  yum_repository:
    name: hashicorp
    description: hashicorp repo
    file: hashicorp.repo
    baseurl: https://rpm.releases.hashicorp.com/RHEL/$releasever/$basearch/stable
    gpgcheck: yes
    gpgkey: https://rpm.releases.hashicorp.com/gpg

- name: Install terraform
  dnf:
    name: terraform
    state: present

- name: Configure libvirt storage pool
  shell:
    cmd: |
      virsh pool-define-as default dir - - - - "/var/lib/libvirt/images"
      virsh pool-build default
      virsh pool-start default
      virsh pool-autostart default
      virsh pool-list --all
      virsh pool-info default
  args:
    executable: /bin/bash
  failed_when:
  changed_when: false

- name: Configure libvirt bridge network
  shell:
    cmd: |
      ip link add br0 type bridge
      ip link set ens8u1 up
      ip link set ens8u1 master br0
      ip address add dev br0 10.0.2.74/24

      
      cat <<EOF | tee /etc/sysconfig/network-scripts/ifcfg-br0
DEVICE=br0
TYPE=Bridge
BOOTPROTO=none
IPADDR=10.0.2.74
GATEWAY=10.0.0.1
NETMASK=255.255.255.0
ONBOOT=yes
DELAY=0
NM_CONTROLLED=0
EOF

    cat <<EOF | tee /etc/sysconfig/network-scripts/ifcfg-ens8u1
TYPE=ethernet
BOOTPROTO=none
NAME=ens8u1
DEVICE=ens8u1
ONBOOT=yes
BRIDGE=br0
DELAY=0
NM_CONTROLLED=0
EOF

    cat <<EOF | tee /etc/sysctl.d/99-netfilter-bridge.conf
net.bridge.bridge-nf-call-ip6tables = 0
net.bridge.bridge-nf-call-iptables = 0
net.bridge.bridge-nf-call-arptables = 0
EOF

    modprobe br_netfilter
    
    cat <<EOF | tee /etc/modules-load.d/br_netfilter.conf
br_netfilter
EOF

    sysctl -p /etc/sysctl.d/99-netfilter-bridge.conf

    cat <<EOF | tee /tmp/bridged-network.xml
<network>
    <name>bridged-network</name>
    <forward mode="bridge" />
    <bridge name="br0" />
</network>
EOF

    virsh net-define /tmp/bridged-network.xml
    virsh net-start bridged-network
    virsh net-autostart bridged-network
  args:
    executable: /bin/bash
  failed_when:
  changed_when: false